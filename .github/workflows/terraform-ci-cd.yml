name: terraform-cd

on:
  push:
    branches: ["main"]
    paths:
      - "terraform/eks/**"
      - "terraform/observability/**"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  PROJECT: "pokemon-game"
  CLUSTER_NAME: "pokemon-game-eks"
  LOCK_TABLE: "pokemon-game-tf-locks"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: assert role arn present
        run: |
          if [ -z "${{ vars.TERRAFORM_CD_ROLE_ARN }}" ]; then
            echo "TERRAFORM_CD_ROLE_ARN repo variable is required"
            exit 1
          fi

      - name: configure aws creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.TERRAFORM_CD_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: resolve state bucket
        id: bucket
        run: |
          if [ -n "${{ vars.STATE_BUCKET }}" ]; then
            echo "bucket=${{ vars.STATE_BUCKET }}" >> $GITHUB_OUTPUT
          else
            B=$(aws s3api list-buckets --query 'Buckets[].Name' --output text | tr '\t' '\n' | grep '^pokemon-game-tfstate-' | head -n1 || true)
            if [ -z "$B" ]; then
              echo "No STATE_BUCKET var and no pokemon-game-tfstate-* found"
              exit 1
            fi
            echo "bucket=$B" >> $GITHUB_OUTPUT
          fi

      - name: setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.30.0"

      - name: install terrascan
        run: |
          VER="1.19.1"
          curl -L -o terrascan.tar.gz "https://github.com/tenable/terrascan/releases/download/v${VER}/terrascan_Linux_x86_64.tar.gz"
          tar -xzf terrascan.tar.gz terrascan && sudo mv terrascan /usr/local/bin/terrascan

      # EKS
      - name: tf init eks
        working-directory: terraform/eks
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ steps.bucket.outputs.bucket }}" \
            -backend-config="key=eks/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.LOCK_TABLE }}"

      - name: write tfvars eks
        working-directory: terraform/eks
        run: |
          cat > terraform.tfvars <<EOF
          region       = "${{ env.AWS_REGION }}"
          project      = "${{ env.PROJECT }}"
          state_bucket = "${{ steps.bucket.outputs.bucket }}"
          lock_table   = "${{ env.LOCK_TABLE }}"
          cluster_name = "${{ env.CLUSTER_NAME }}"
          EOF

      - name: terrascan eks
        working-directory: terraform/eks
        run: terrascan scan -i terraform -d .
        continue-on-error: true

      - name: validate eks
        working-directory: terraform/eks
        run: terraform validate

      - name: apply eks
        working-directory: terraform/eks
        run: terraform apply -auto-approve

      # OBSERVABILITY
      - name: tf init observability
        working-directory: terraform/observability
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${{ steps.bucket.outputs.bucket }}" \
            -backend-config="key=observability/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ env.LOCK_TABLE }}"

      - name: discover alb arn suffix
        id: alb
        run: |
          ALB=$(aws elbv2 describe-load-balancers --region "${{ env.AWS_REGION }}" \
            --query 'LoadBalancers[?Type==`application`].LoadBalancerArn' --output text | head -n1)
          SFX="${ALB#*:loadbalancer/}"
          echo "suffix=${SFX}" >> "$GITHUB_OUTPUT"

      - name: write tfvars observability
        working-directory: terraform/observability
        run: |
          cat > terraform.tfvars <<EOF
          region          = "${{ env.AWS_REGION }}"
          project         = "${{ env.PROJECT }}"
          state_bucket    = "${{ steps.bucket.outputs.bucket }}"
          lock_table      = "${{ env.LOCK_TABLE }}"
          cluster_name    = "${{ env.CLUSTER_NAME }}"
          alb_arn_suffix  = "${{ steps.alb.outputs.suffix }}"
          EOF

      - name: terrascan observability
        working-directory: terraform/observability
        run: terrascan scan -i terraform -d .
        continue-on-error: true

      - name: validate observability
        working-directory: terraform/observability
        run: terraform validate

      - name: apply observability
        working-directory: terraform/observability
        run: terraform apply -auto-approve

      - name: update kubeconfig
        run: aws eks update-kubeconfig --name "${{ env.CLUSTER_NAME }}" --region "${{ env.AWS_REGION }}" --alias "${{ env.CLUSTER_NAME }}"

      - name: cloudwatch patch
        run: python3 ./scripts/cloudwatch-patch.py
