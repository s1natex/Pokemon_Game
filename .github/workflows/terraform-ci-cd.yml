name: terraform-cd

on:
  push:
    branches: ["main"]
    paths:
      - "terraform/eks/**"
      - "terraform/observability/**"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  STATE_BUCKET: ${{ vars.STATE_BUCKET }}
  LOCK_TABLE: ${{ vars.LOCK_TABLE }}
  PROJECT: "pokemon-game"
  CLUSTER_NAME: "pokemon-game-eks"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS creds (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.TERRAFORM_CD_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: "v1.30.0"

      - name: Install Terrascan
        run: |
          VER="1.19.1"
          curl -L -o terrascan.tar.gz "https://github.com/tenable/terrascan/releases/download/v${VER}/terrascan_Linux_x86_64.tar.gz"
          tar -xzf terrascan.tar.gz terrascan && sudo mv terrascan /usr/local/bin/terrascan

      # ---- EKS ----
      - name: Terraform init (eks)
        working-directory: terraform/eks
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${STATE_BUCKET}" \
            -backend-config="key=eks/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${LOCK_TABLE}"

      - name: Write tfvars (eks)
        working-directory: terraform/eks
        run: |
          cat > terraform.tfvars <<EOF
          region       = "${AWS_REGION}"
          project      = "${PROJECT}"
          state_bucket = "${STATE_BUCKET}"
          lock_table   = "${LOCK_TABLE}"
          cluster_name = "${CLUSTER_NAME}"
          EOF

      - name: Terrascan (eks)
        working-directory: terraform/eks
        run: terrascan scan -i terraform -d .
        continue-on-error: true

      - name: Validate (eks)
        working-directory: terraform/eks
        run: terraform validate

      - name: Apply (eks)
        working-directory: terraform/eks
        run: terraform apply -auto-approve

      # ---- OBSERVABILITY ----
      - name: Terraform init (observability)
        working-directory: terraform/observability
        run: |
          terraform init -reconfigure \
            -backend-config="bucket=${STATE_BUCKET}" \
            -backend-config="key=observability/terraform.tfstate" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${LOCK_TABLE}"

      - name: Discover ALB ARN suffix
        id: alb
        run: |
          ALB=$(aws elbv2 describe-load-balancers --region "${AWS_REGION}" \
            --query 'LoadBalancers[?Type==`application`].LoadBalancerArn' --output text | head -n1)
          SFX="${ALB#*:loadbalancer/}"
          echo "suffix=${SFX}" >> "$GITHUB_OUTPUT"

      - name: Write tfvars (observability)
        working-directory: terraform/observability
        run: |
          cat > terraform.tfvars <<EOF
          region          = "${AWS_REGION}"
          project         = "${PROJECT}"
          state_bucket    = "${STATE_BUCKET}"
          lock_table      = "${LOCK_TABLE}"
          cluster_name    = "${CLUSTER_NAME}"
          alb_arn_suffix  = "${{ steps.alb.outputs.suffix }}"
          EOF

      - name: Terrascan (observability)
        working-directory: terraform/observability
        run: terrascan scan -i terraform -d .
        continue-on-error: true

      - name: Validate (observability)
        working-directory: terraform/observability
        run: terraform validate

      - name: Apply (observability)
        working-directory: terraform/observability
        run: terraform apply -auto-approve

      # ---- CLOUDWATCH PATCH ----
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name "${CLUSTER_NAME}" --region "${AWS_REGION}" --alias "${CLUSTER_NAME}"

      - name: CloudWatch patch
        run: python3 ./scripts/cloudwatch-patch.py
