name: app-ci

on:
  push:
    branches: ["main"]
    paths:
      - "app/**"
  workflow_dispatch:

permissions:
  contents: write

env:
  TZ: Asia/Jerusalem
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_PREFIX: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/pokemon_game
  SERVICES: "frontend pokemon-manager scheduler pokemon-fetcher battle-manager trainer-manager"

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Compute timestamps & short SHA
        id: meta
        run: |
          TS=$(date +'%d%m%Y-%H%M')
          SHORT_SHA=${GITHUB_SHA::7}
          echo "ts=$TS" >> $GITHUB_OUTPUT
          echo "sha7=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install test deps (minimal)
        run: |
          set -euxo pipefail
          python -m pip install -U pip
          # Unit tests: only python stdlib + pytest; Runtime tests use requests.
          pip install pytest requests bandit
          # Tools for later steps
          sudo apt-get update -y
          sudo apt-get install -y curl gnupg jq
          # yq (for manifest updates)
          YQ_VERSION=v4.44.3
          curl -sL https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64 -o yq
          sudo install -m 0755 yq /usr/local/bin/yq
          # Trivy via official APT repo (reliable on GH runners)
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /etc/apt/keyrings/trivy.gpg
          echo "deb [signed-by=/etc/apt/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb stable main" | sudo tee /etc/apt/sources.list.d/trivy.list >/dev/null
          sudo apt-get update -y
          sudo apt-get install -y trivy
          trivy --version

      - name: Unit tests
        env:
          # keep imports simple like local runs
          PYTHONPATH: app
        run: |
          set -euxo pipefail
          pytest -q app/tests/unit

      - name: Compose up (runtime)
        run: |
          set -euxo pipefail
          docker compose -f app/docker-compose.yml up -d
          # your runtime tests do their own wait/health via requests

      - name: Runtime tests
        run: |
          set -euxo pipefail
          if [ -d app/tests/runtime ]; then
            pytest -q app/tests/runtime
          else
            echo "no runtime tests found"
          fi

      - name: SAST (Bandit - high+ fails)
        run: |
          set -euxo pipefail
          bandit -r app -lll

      - name: Docker login
        run: |
          set -euxo pipefail
          echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Build & tag images
        run: |
          set -euxo pipefail
          for s in $SERVICES; do
            TAG="${s}-${{ steps.meta.outputs.ts }}-${{ steps.meta.outputs.sha7 }}"
            IMG="${IMAGE_PREFIX}-${s}:${TAG}"
            echo "Building $IMG"
            docker build -t "$IMG" "app/$s"
          done

      - name: Trivy scan (CRITICAL, fail)
        run: |
          set -euxo pipefail
          for s in $SERVICES; do
            TAG="${s}-${{ steps.meta.outputs.ts }}-${{ steps.meta.outputs.sha7 }}"
            IMG="${IMAGE_PREFIX}-${s}:${TAG}"
            echo "Scanning $IMG"
            trivy image --severity CRITICAL --exit-code 1 --ignore-unfixed "$IMG"
          done

      - name: Push images
        run: |
          set -euxo pipefail
          for s in $SERVICES; do
            TAG="${s}-${{ steps.meta.outputs.ts }}-${{ steps.meta.outputs.sha7 }}"
            IMG="${IMAGE_PREFIX}-${s}:${TAG}"
            echo "Pushing $IMG"
            docker push "$IMG"
          done

      - name: Update manifests with new tags
        run: |
          set -euxo pipefail
          for s in $SERVICES; do
            FILE="k8s/app/${s}.yaml"
            if [ -f "$FILE" ]; then
              TAG="${s}-${{ steps.meta.outputs.ts }}-${{ steps.meta.outputs.sha7 }}"
              REPO="${IMAGE_PREFIX}-${s}"
              echo "Updating $FILE -> $REPO:$TAG"
              yq -i '
                (.spec.template.spec.containers[] | select(.name=="'"$s"'") | .image) = "'"$REPO:$TAG"'"
              ' "$FILE"
            fi
          done

      - name: Commit manifests ([skip ci])
        run: |
          set -euxo pipefail
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add k8s/app/*.yaml || true
          git commit -m "[skip ci] update images ${{ steps.meta.outputs.ts }}-${{ steps.meta.outputs.sha7 }}" || echo "nothing to commit"
          git push origin HEAD:main

      - name: Compose down (always)
        if: always()
        run: |
          docker compose -f app/docker-compose.yml down -v || true
